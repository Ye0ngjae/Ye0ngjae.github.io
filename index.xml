<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ye0ngjae</title>
    <link>https://ye0ngjae.blog/</link>
    <description>Recent content on Ye0ngjae</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 31 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ye0ngjae.blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[OS] 프로세스(Process) 관리</title>
      <link>https://ye0ngjae.blog/blog/2024-06-31-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B4%80%EB%A6%AC/</link>
      <pubDate>Sat, 31 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ye0ngjae.blog/blog/2024-06-31-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EA%B4%80%EB%A6%AC/</guid>
      <description>프로그램(Program) 컴퓨터에서 실행될 때 특정 작업을 수행하는 일련의 명령어들의 집합이다. 특정 문제를 해결하기 위해 처리 방법과 순서를 기술하여 컴퓨터에 입력되는 일련의 명령문 집합체이며 대부분의 프로그램은 실행 중(즉, 명령어를 &amp;lsquo;불러들일&amp;rsquo; 때)에 사용자의 입력에 반응하도록 구현된 일련의 명령어들로 구성되어 있다. 대부분의 프로그램들은 하드디스크 등의 매체에 바이너리 형식의 파일로 저장되어 있다가 사용자가 실행시키면 메모리로 적재되어 실행된다.
프로세스(Process) 컴퓨터에서 실행 중인 프로그램으로써 메모리 상에서 실행되는 작업 단위를 지칭한다. 각 프로세스 별로 독립된 메모리 공간을 할당 받으며, Code, Data, Heap, Stack 구조로 이루어져있다.</description>
    </item>
    
    <item>
      <title>[Architecture] MVC Architecture</title>
      <link>https://ye0ngjae.blog/blog/2024-08-21-mvcarchitecture/</link>
      <pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ye0ngjae.blog/blog/2024-08-21-mvcarchitecture/</guid>
      <description>MVC 아키텍처 MVC (Model-View-Controller)는 사용자 인터페이스를 개발할 때 자주 사용되는 디자인 패턴으로, 애플리케이션을 세 가지 상호 연결된 컴포넌트로 나눈다.
모델 (Model) 모델 컴포넌트는 사용자가 작업하는 모든 데이터 관련 로직에 해당한다. 이는 뷰와 컨트롤러 컴포넌트 간에 전송되는 데이터나 기타 비즈니스 로직 관련 데이터를 나타낼 수 있다.
예시: 고객 객체는 데이터베이스에서 고객 정보를 검색하고, 이를 조작하여 다시 데이터베이스에 업데이트하거나 데이터를 렌더링하는 데 사용한다.
뷰 (View) 뷰 컴포넌트는 애플리케이션의 모든 UI 로직에 사용된다. 이는 모델에 포함된 데이터의 시각화를 나타낸다.</description>
    </item>
    
    <item>
      <title>[Architecture] Layered &amp; Multitier Architecture</title>
      <link>https://ye0ngjae.blog/blog/2024-08-20-ntierarchitecture/</link>
      <pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ye0ngjae.blog/blog/2024-08-20-ntierarchitecture/</guid>
      <description>Layered Architecture 소프트웨어 시스템을 여러 계층으로 나누어 구성하는 아키텍처 스타일이다. 3 계층 구조(3 Tier Architecture)가 대표적이며, 표현 계층, 애플리케이션 계층, 데이터 계층으로 나뉜다.시스템의 모듈화와 유지 보수성을 높이기 위해 사용된다.
3 계층 구조의 구성 요소 표현 계층(Presentation Layer) 사용자와 직접 상호 작용하는 계층으로, 사용자 인터페이스를 담당한다. 정보를 표시하고 사용자 입력을 받아들인다. 애플리케이션 계층(Application Layer) / 서비스의 주 로직이 구현되어 있는 계층이다. 비즈니스 로직을 처리하고 요청을 조정한다. 데이터 계층(Data Layer) 데이터베이스와 상호 작용하는 계층이다.</description>
    </item>
    
    <item>
      <title>[SQL] DB에서의 사용자 권한 관리</title>
      <link>https://ye0ngjae.blog/blog/2024-08-20-db%EC%82%AC%EC%9A%A9%EC%9E%90%EA%B6%8C%ED%95%9C%EA%B4%80%EB%A6%AC/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ye0ngjae.blog/blog/2024-08-20-db%EC%82%AC%EC%9A%A9%EC%9E%90%EA%B6%8C%ED%95%9C%EA%B4%80%EB%A6%AC/</guid>
      <description>DB에서의 사용자 권한 관리 DB에서의 사용자 관리는 데이터베이스의 보안과 운영에 중요한 역할을 한다. 적절한 권한 관리를 통하여 데이터의 무결성을 유지하고, 불필요한 접근을 제한할 수 있다.
DB를 처음 설치하고 접속할 경우 기본적으로 주어지는 계정은 root 계정이기 때문에, 이를 그대로 서비스 운영에 사용하는 것은 보안상 매우 위험한 선택이 될 수 있다. 따라서, 개발자는 서비스 별로 적절한 권한을 가진 사용자를 생성하여 사용하는 것이 보안적인 측면에서 바람직하다.
사용자 생성 권한을 부여하기에 앞서 사용자를 생성해야 한다.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://ye0ngjae.blog/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ye0ngjae.blog/about/</guid>
      <description>About me</description>
    </item>
    
    
  </channel>
</rss>
